name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/github-actions-aws]
  pull_request:
    branches: [main, develop, feature/github-actions-aws]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m pytest tests/unit/ -v

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/setup-env
        with:
          db_username: ${{ secrets.DB_USERNAME }}
          db_password: ${{ secrets.DB_PASSWORD }}
          db_host: ${{ secrets.DB_HOST }}
          db_port: ${{ secrets.DB_PORT }}
          db_name: ${{ secrets.DB_NAME }}
          weatherbit_api_key: ${{ secrets.WEATHERBIT_API_KEY }}

      - uses: ./.github/actions/docker-build
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
          image_name: thunder-buddy

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            # Install Docker Compose V2
            if ! docker compose version > /dev/null 2>&1; then
              sudo yum install -y docker-compose-plugin
            fi

            # Deploy application
            uses: ./.github/actions/deploy
            with:
              docker_username: ${{ secrets.DOCKER_USERNAME }}
              db_username: ${{ secrets.DB_USERNAME }}
              db_password: ${{ secrets.DB_PASSWORD }}
              db_name: ${{ secrets.DB_NAME }}
              weatherbit_api_key: ${{ secrets.WEATHERBIT_API_KEY }}

            # Start services
            docker compose pull
            docker compose down --remove-orphans
            docker compose up -d

            # Test connection
            for i in {1..10}; do
              if docker compose exec app python scripts/test_db_connection.py; then
                echo "API service successfully connected to database!"
                break
              fi
              echo "Waiting for API service to connect to database... attempt $i/10"
              sleep 3
            done
