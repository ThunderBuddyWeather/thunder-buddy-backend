[MASTER]
# Files or directories to be skipped. They should be base names, not paths
ignore=
    CVS,
    .git,
    .gitignore,
    .env,
    .venv,
    venv,
    env,
    build,
    dist,
    __pycache__,
    *.pyc,
    *.pyo,
    *.pyd,
    *.so,
    *.dll,
    *.dylib,
    .tox,
    .coverage,
    .coverage.*,
    .pytest_cache,
    .mypy_cache,
    htmlcov,
    site-packages,
    lib/python*,
    **/site-packages/**,
    **/lib/python*/**,
    **/venv/**,
    **/.venv/**,
    **/env/**

# Files or directories matching the regex patterns are skipped
ignore-patterns=
    .+/venv/.+,
    .+/\.venv/.+,
    .+/env/.+,
    .+/\.env/.+,
    .+/site-packages/.+,
    .+/lib/python[0-9.]+/.+,
    .*/\..+,
    .*\.pyc$,
    .*\.pyo$,
    .*\.pyd$,
    .*\.so$,
    .*\.dll$,
    .*\.dylib$,
    .*\.egg-info$,
    .*\.egg$

# Add Python module names here where you want to disable all warnings
ignored-modules=numpy,torch,tensorflow,cv2

# Files to load plugins from
load-plugins=

# Use multiple processes to speed up Pylint (use "0" for auto)
jobs=0

[FORMAT]
# Maximum number of characters on a single line (match black)
max-line-length=88

# Maximum number of lines in a module
max-module-lines=2000

# String used as indentation unit (2 spaces, 4 spaces, or tab)
indent-string='    '

[MESSAGES CONTROL]
# Disable specific warnings
disable=C0303,  # trailing-whitespace (handled by formatter)
        C0304,  # missing-final-newline (handled by formatter)
        C0411,  # wrong-import-order (handled by isort)
        C0412,  # ungrouped-imports (handled by isort)
        C0413,  # wrong-import-position (sometimes necessary)
        C0414,  # useless-import-alias (can be useful for clarity)
        W0611,  # unused-import (handled by autoflake/IDE)
        W0511,  # fixme (TODO/FIXME comments are useful)
        R0903,  # too-few-public-methods (valid for data classes)
        W0703,  # broad-except (acceptable in top-level error handling)
        W0702,  # bare-except (acceptable in top-level error handling)
        W0603,  # global-statement (sometimes necessary)
        C0207,  # use-maxsplit-arg (style preference)
        W1514,  # unspecified-encoding (Python 3 handles UTF-8 well)
        R0801,  # duplicate-code (can be too strict)
        W0718,  # broad-exception-caught (acceptable in error handling)
        W0621,  # redefined-outer-name (acceptable in test fixtures)
        W0613,  # unused-argument (needed for hooks and callbacks)
        E0401,  # import-error (for dependencies)
        R0913,  # too-many-arguments (can be valid)
        R0914,  # too-many-locals (can be valid in complex functions)
        F0011   # config-parse-error (for duplicate sections)

[BASIC]
# Regular expressions for various naming styles
good-names=i,j,k,ex,Run,_,id,fp,db,up,ip
variable-naming-style=snake_case
const-naming-style=UPPER_CASE
function-naming-style=snake_case
method-naming-style=snake_case
class-naming-style=PascalCase
module-naming-style=snake_case

# Regular expression for function names that should be ignored
no-docstring-rgx=^_|test_.*

[DESIGN]
# Maximum number of arguments for functions
max-args=10

# Maximum number of locals for functions
max-locals=20

# Maximum number of return statements
max-returns=10

# Maximum number of branches
max-branches=20

# Maximum number of statements
max-statements=100

# Maximum number of parents
max-parents=10

# Maximum number of attributes
max-attributes=15

# Minimum number of public methods
min-public-methods=0

[REPORTS]
# Set the output format (text, parseable, colorized, html)
output-format=colorized

# Include a brief explanation of each error
msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}

# Disable the reports section
reports=no

# Disable the final score
score=no

[SIMILARITIES]
# Minimum lines number of a similarity
min-similarity-lines=8

# Ignore imports when computing similarities
ignore-imports=yes

# Ignore docstrings when computing similarities
ignore-docstrings=yes

[TYPECHECK]
# List of module names for which member attributes should not be checked
ignored-modules=numpy,torch,tensorflow,cv2

# List of classes names for which member attributes should not be checked
ignored-classes=SQLObject,SQLAlchemy,scoped_session

[MISCELLANEOUS]
# List of note tags to take into consideration
notes=FIXME,XXX,TODO,HACK

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=CVS

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Use multiple processes to speed up Pylint.
jobs=1

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist=

[MESSAGES CONTROL]
# Disable the message, report, category or checker with the given id(s).
disable=wrong-import-position,
        import-outside-toplevel,
        missing-module-docstring,
        missing-function-docstring,
        missing-class-docstring,
        line-too-long,
        too-many-arguments,
        too-many-locals,
        too-many-statements,
        too-many-branches,
        too-many-instance-attributes,
        too-few-public-methods,
        broad-except,
        unused-import

# Enable the message, report, category or checker with the given id(s).
enable=

[REPORTS]
# Set the output format.
output-format=text

# Tells whether to display a full report or only the messages
reports=yes

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
#msg-template=

[BASIC]
# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,id,db

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Include a hint for the correct naming format with invalid-name
include-naming-hint=no

# Regular expression matching correct function names
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct variable names
variable-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct constant names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression matching correct attribute names
attr-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct argument names
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct class attribute names
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

# Regular expression matching correct inline iteration names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Regular expression matching correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression matching correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression matching correct method names
method-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

[FORMAT]
# Maximum number of characters on a single line.
max-line-length=100

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no

# List of optional constructs for which whitespace checking is disabled
# no-space-check=trailing-comma,dict-separator

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

[LOGGING]
# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules=logging

[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO

[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=yes

[TYPECHECK]
# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis
ignored-modules=

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=SQLObject

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent

[VARIABLES]
# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=_$|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,_cb

[CLASSES]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,_fields,_replace,_source,_make

[DESIGN]
# Maximum number of arguments for function / method
max-args=5

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Minimum number of public methods for a class (see R0903).
min-public-methods=2

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

[IMPORTS]
# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=

[EXCEPTIONS]
# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception 